/*
 * File: SineGratingSmoothedAnnulusShader.frag.txt 
 * Shader for drawing of basic parameterized smooth edge sine grating patches.
 * Applies a circular aperture of radius 'Radius', smoothed by 'Sigma'.
 *
 * Copyright 2011, Ian Andolina <http://github.com/iandol>, licenced under the MIT Licence
 *
 */

const float halfpi = 0.5 * 3.141592654;

uniform float Radius_outer;
uniform float Radius_inner;
uniform float Sigma_inner;
uniform float Sigma_outer;
uniform float useAlpha;
uniform float Method;
uniform vec2 bound_x;
uniform vec2 Center;

uniform vec4 Offset;

float Dist;
float Mod = 1.0;

varying vec4  baseColor;
varying float Phase;
varying float FreqTwoPi;

void main()
{
    /* Query current output texel position: */
    vec2 pos = gl_TexCoord[0].xy;

    /* find our distance from center */
    Dist = distance(pos, Center);

    /* If distance to center (aka radius of pixel) > Radius, discard this pixel: */
    if (Dist > Radius_outer) discard;
    if (Dist < Radius_inner) discard;
    if ((pos[0] < bound_x[0]) | (pos[1] > bound_x[1])) discard;

    /* Calculate a smoothing modifier using our distance from radius and a Sigma */
    if (Method < 1.0) {
        if (abs(Radius_outer - Dist) < abs(Radius_inner - Dist)){
            Mod = ((Sigma_outer - (Radius_outer - Dist)) / Sigma_outer);
        }
        else {
            Mod = ((Sigma_inner + (Radius_inner - Dist)) / Sigma_inner);
        }
        Mod = clamp(Mod, 0.0, 1.0);
        Mod = cos(Mod * halfpi);
    }
    else {
        if (abs(Radius_outer - Dist) < abs(Radius_inner - Dist)){
            Mod = smoothstep(Radius_outer, (Radius_outer - Sigma_outer), Dist);
        }
        else {
            Mod = smoothstep(Radius_inner, (Radius_inner + Sigma_inner), Dist);
        }        
    }

    /* Evaluate sine grating at requested position, frequency and phase: */
    float sv = sin(pos.x * FreqTwoPi + Phase);

    /* Multiply/Modulate base color and alpha with calculated sine          */
    /* values, add some constant color/alpha Offset, assign as final fragment */
    /* output color: */
    if (useAlpha < 1.0) {
        gl_FragColor = (baseColor * (sv * Mod)) + Offset;
    }
    else {
        gl_FragColor = (baseColor * sv) + Offset;
        gl_FragColor.a = Mod;
    }
}
